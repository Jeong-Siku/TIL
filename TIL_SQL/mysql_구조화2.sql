CREATE TABLE TB_POPLTN_DATA (
    ADMINIST_ZONE VARCHAR(150),
    TOT_POPLTN_CO INT(10),
    AGE_SCTN_POPLTN_CO INT(10),
    POPLTN_CO_0_9 INT(10),
    POPLTN_CO_10_19 INT(10),
    POPLTN_CO_20_29 INT(10),
    POPLTN_CO_30_39 INT(10),
    POPLTN_CO_40_49 INT(10),
    POPLTN_CO_50_59 INT(10),
    POPLTN_CO_60_69 INT(10),
    POPLTN_CO_70_79 INT(10),
    POPLTN_CO_80_89 INT(10),
    POPLTN_CO_90_99 INT(10),
    POPLTN_CO_100 INT(10),
    MALE_TOT_POPLTN_CO INT(10),
    MALE_AGE_SCTN_POPLTN_CO INT(10),
    MALE_POPLTN_CO_0_9 INT(10),
    MALE_POPLTN_CO_10_19 INT(10),
    MALE_POPLTN_CO_20_29 INT(10),
    MALE_POPLTN_CO_30_39 INT(10),
    MALE_POPLTN_CO_40_49 INT(10),
    MALE_POPLTN_CO_50_59 INT(10),
    MALE_POPLTN_CO_60_69 INT(10),
    MALE_POPLTN_CO_70_79 INT(10),
    MALE_POPLTN_CO_80_89 INT(10),
    MALE_POPLTN_CO_90_99 INT(10),
    MALE_POPLTN_CO_100 INT(10),
    FEMALE_TOT_POPLTN_CO INT(10),
    FEMALE_AGE_SCTN_POPLTN_CO INT(10),
    FEMALE_POPLTN_CO_0_9 INT(10),
    FEMALE_POPLTN_CO_10_19 INT(10),
    FEMALE_POPLTN_CO_20_29 INT(10),
    FEMALE_POPLTN_CO_30_39 INT(10),
    FEMALE_POPLTN_CO_40_49 INT(10),
    FEMALE_POPLTN_CO_50_59 INT(10),
    FEMALE_POPLTN_CO_60_69 INT(10),
    FEMALE_POPLTN_CO_70_79 INT(10),
    FEMALE_POPLTN_CO_80_89 INT(10),
    FEMALE_POPLTN_CO_90_99 INT(10),
    FEMALE_POPLTN_CO_100 INT(10)
);

SELECT * from TB_POPLTN_DATA;

# 자료를 정리하기 - 행정동과 코드를 분리, 데이터 날짜, 카르테시안 조인
# 카르테시안 조인 : 조인을 할 때 키가 없다면 각 값이 곱해지는 형태로 생성된다
# 서비스를 만들 때는 카르테시안 조인을 피해야한다. 데이터분석에서는 다양한 데이터 형성을 위해 카르테시안 조인을 사용한다.

CREATE TABLE TB_POPLTN (
  ADMINIST_ZONE_NO VARCHAR(10),
  ADMINIST_ZONE_NM VARCHAR(150),
  STD_MT VARCHAR(6),
  POPLTN_SE_CD VARCHAR(1),
  AGRDE_SE_CD VARCHAR(3),
  POPLTN_CNT INT(10),
  CONSTRAINT TB_POPLTN_PK PRIMARY KEY (ADMINIST_ZONE_NO, STD_MT, POPLTN_SE_CD, AGRDE_SE_CD)
); # constraint(제약) : NOT NULL, UNIQUE, PRIMARY KEY = NOT NULL + UNIQUE, FOREIGN KEY, CHECK

INSERT INTO TB_POPLTN
SELECT A.ADMINIST_ZONE_NO, A.ADMINIST_ZONE_NM, A.STD_MT
     , CASE WHEN LVL1 = 1 THEN 'M' WHEN LVL1 = 2 THEN 'F' WHEN LVL1 = 3 THEN 'T' END AS POPLTN_SE_CD
     , CASE WHEN LVL2 = 1  THEN '000' WHEN LVL2 = 2  THEN '010' WHEN LVL2 = 3  THEN '020'
            WHEN LVL2 = 4  THEN '030' WHEN LVL2 = 5  THEN '040' WHEN LVL2 = 6  THEN '050'
            WHEN LVL2 = 7  THEN '060' WHEN LVL2 = 8  THEN '070' WHEN LVL2 = 9  THEN '080' WHEN LVL2 = 10 THEN '090' WHEN LVL2 = 11 THEN '100' END AS AGRDE_SE_CD
     , CASE WHEN LVL1 = 1 AND LVL2 = 1  THEN MALE_POPLTN_CO_0_9     WHEN LVL1 = 1 AND LVL2 = 2  THEN MALE_POPLTN_CO_10_19
            WHEN LVL1 = 1 AND LVL2 = 3  THEN MALE_POPLTN_CO_20_29   WHEN LVL1 = 1 AND LVL2 = 4  THEN MALE_POPLTN_CO_30_39
            WHEN LVL1 = 1 AND LVL2 = 5  THEN MALE_POPLTN_CO_40_49   WHEN LVL1 = 1 AND LVL2 = 6  THEN MALE_POPLTN_CO_50_59
            WHEN LVL1 = 1 AND LVL2 = 7  THEN MALE_POPLTN_CO_60_69   WHEN LVL1 = 1 AND LVL2 = 8  THEN MALE_POPLTN_CO_70_79
            WHEN LVL1 = 1 AND LVL2 = 9  THEN MALE_POPLTN_CO_80_89   WHEN LVL1 = 1 AND LVL2 = 10 THEN MALE_POPLTN_CO_90_99
            WHEN LVL1 = 1 AND LVL2 = 11 THEN MALE_POPLTN_CO_100     WHEN LVL1 = 2 AND LVL2 = 1  THEN FEMALE_POPLTN_CO_0_9
            WHEN LVL1 = 2 AND LVL2 = 2  THEN FEMALE_POPLTN_CO_10_19 WHEN LVL1 = 2 AND LVL2 = 3  THEN FEMALE_POPLTN_CO_20_29
            WHEN LVL1 = 2 AND LVL2 = 4  THEN FEMALE_POPLTN_CO_30_39 WHEN LVL1 = 2 AND LVL2 = 5  THEN FEMALE_POPLTN_CO_40_49
            WHEN LVL1 = 2 AND LVL2 = 6  THEN FEMALE_POPLTN_CO_50_59 WHEN LVL1 = 2 AND LVL2 = 7  THEN FEMALE_POPLTN_CO_60_69
            WHEN LVL1 = 2 AND LVL2 = 8  THEN FEMALE_POPLTN_CO_70_79 WHEN LVL1 = 2 AND LVL2 = 9  THEN FEMALE_POPLTN_CO_80_89
            WHEN LVL1 = 2 AND LVL2 = 10 THEN FEMALE_POPLTN_CO_90_99 WHEN LVL1 = 2 AND LVL2 = 11 THEN FEMALE_POPLTN_CO_100
            WHEN LVL1 = 3 AND LVL2 = 1  THEN POPLTN_CO_0_9          WHEN LVL1 = 3 AND LVL2 = 2  THEN POPLTN_CO_10_19
            WHEN LVL1 = 3 AND LVL2 = 3  THEN POPLTN_CO_20_29        WHEN LVL1 = 3 AND LVL2 = 4  THEN POPLTN_CO_30_39
            WHEN LVL1 = 3 AND LVL2 = 5  THEN POPLTN_CO_40_49        WHEN LVL1 = 3 AND LVL2 = 6  THEN POPLTN_CO_50_59
            WHEN LVL1 = 3 AND LVL2 = 7  THEN POPLTN_CO_60_69        WHEN LVL1 = 3 AND LVL2 = 8  THEN POPLTN_CO_70_79
            WHEN LVL1 = 3 AND LVL2 = 9  THEN POPLTN_CO_80_89        WHEN LVL1 = 3 AND LVL2 = 10 THEN POPLTN_CO_90_99
            WHEN LVL1 = 3 AND LVL2 = 11 THEN POPLTN_CO_100 END AS POPLTN_CNT
  FROM
     (
      SELECT SUBSTR(TB_POPLTN_DATA.ADMINIST_ZONE, INSTR(ADMINIST_ZONE, '(') + 1, 10) AS ADMINIST_ZONE_NO # substr(컬럼, 시작위치, 길이) 시작위치로부터 길이 만큼 출력
           , SUBSTR(ADMINIST_ZONE, 1, INSTR(ADMINIST_ZONE, '(')-1) AS ADMINIST_ZONE_NM,# instr(str,substr) str에서 substr이 가리키는 위치 반환
             '202304' AS STD_MT
           , MALE_POPLTN_CO_0_9    , MALE_POPLTN_CO_10_19  , MALE_POPLTN_CO_20_29
           , MALE_POPLTN_CO_30_39  , MALE_POPLTN_CO_40_49  , MALE_POPLTN_CO_50_59
           , MALE_POPLTN_CO_60_69  , MALE_POPLTN_CO_70_79  , MALE_POPLTN_CO_80_89  , MALE_POPLTN_CO_90_99  , MALE_POPLTN_CO_100
           , FEMALE_POPLTN_CO_0_9  , FEMALE_POPLTN_CO_10_19, FEMALE_POPLTN_CO_20_29
           , FEMALE_POPLTN_CO_30_39, FEMALE_POPLTN_CO_40_49, FEMALE_POPLTN_CO_50_59
           , FEMALE_POPLTN_CO_60_69, FEMALE_POPLTN_CO_70_79, FEMALE_POPLTN_CO_80_89, FEMALE_POPLTN_CO_90_99, FEMALE_POPLTN_CO_100
           , POPLTN_CO_0_9         , POPLTN_CO_10_19, POPLTN_CO_20_29
           , POPLTN_CO_30_39       , POPLTN_CO_40_49, POPLTN_CO_50_59
           , POPLTN_CO_60_69       , POPLTN_CO_70_79, POPLTN_CO_80_89, POPLTN_CO_90_99, POPLTN_CO_100
           , LVL1, LVL2
        FROM TB_POPLTN_DATA, (SELECT (tmp1.idx) AS LVL1 FROM (SELECT 1 as idx UNION SELECT 2 UNION SELECT 3) tmp1) LVL1, (SELECT (tmp2.idx) AS LVL2 FROM (SELECT 1 as idx UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10 UNION SELECT 11) tmp2) LVL2
     ) A ; # UNION은 데이터를 행으로 추가한다.
     
COMMIT;

SELECT * FROM TB_POPLTN;

# 2023년 4월 기준 전국의 성별 인구수 합계를 구하여 여성 / 남성 비율을 구해보기

	# 1) 남녀 인구수 합계

SELECT A.POPLTN_SE_CD,
	   # SUM(A.POPLTN_CNT) AS AGRDE_POPLTN_CNT
	    CASE 	# 연산은 행을 위주로 진행되나, 선택은 컬럼을 위주로 진행되기 때문에 각 데이터를 각 컬럼으로 구별할 것
			WHEN A.POPLTN_SE_CD = 'M' THEN SUM(A.POPLTN_CNT) 
            ELSE 0 
		END AS MALE_AGRDE_POPLTN_CNT,
        
        CASE 
			WHEN A.POPLTN_SE_CD = 'F' THEN SUM(A.POPLTN_CNT) 
            ELSE 0 
		END AS FEMALE_AGRDE_POPLTN_CNT
        
FROM TB_POPLTN A
WHERE A.ADMINIST_ZONE_NO LIKE '__00000000' # _은 개수만큼 아무 문자가 올 수 있음
  AND A.POPLTN_SE_CD IN ('M','F')
  AND A.STD_MT = '202304'
GROUP BY A.POPLTN_SE_CD; 

	# 2) 남녀 비율 구하기 	
SELECT B.MALE_AGRDE_POPLTN_CNT AS "남자 인구수",
	   B.FEMALE_AGRDE_POPLTN_CNT AS "여자 인구수",
       ROUND(B.MALE_AGRDE_POPLTN_CNT / B.FEMALE_AGRDE_POPLTN_CNT* 100,4), -- 남자 / 여자
       ROUND(B.MALE_AGRDE_POPLTN_CNT / (B.MALE_AGRDE_POPLTN_CNT+B.FEMALE_AGRDE_POPLTN_CNT)*100,4) AS "전체 인구수 대비 남자 비율",
       ROUND(B.FEMALE_AGRDE_POPLTN_CNT / (B.MALE_AGRDE_POPLTN_CNT+B.FEMALE_AGRDE_POPLTN_CNT)*100,4) AS "전체 인구수 대비 여자 비율"
FROM (
		SELECT MAX(MALE_AGRDE_POPLTN_CNT) AS MALE_AGRDE_POPLTN_CNT, # 필요없는 부분을 생략하기 위해 MAX를 사용 
			   MAX(FEMALE_AGRDE_POPLTN_CNT) AS FEMALE_AGRDE_POPLTN_CNT

		FROM (
			SELECT A.POPLTN_SE_CD,
			   # SUM(A.POPLTN_CNT) AS AGRDE_POPLTN_CNT
				CASE 	
					WHEN A.POPLTN_SE_CD = 'M' THEN SUM(A.POPLTN_CNT) 
					ELSE 0 
				END AS MALE_AGRDE_POPLTN_CNT,
				
				CASE 
					WHEN A.POPLTN_SE_CD = 'F' THEN SUM(A.POPLTN_CNT) 
					ELSE 0 
				END AS FEMALE_AGRDE_POPLTN_CNT
				
		FROM TB_POPLTN A
		WHERE A.ADMINIST_ZONE_NO LIKE '__00000000' # _은 개수만큼 아무 문자가 올 수 있음
		  AND A.POPLTN_SE_CD IN ('M','F')
		  AND A.STD_MT = '202304'
		GROUP BY A.POPLTN_SE_CD) AS A) B;

# 2023년 04월 기준 전국 수요 시/도의 연령대별 인구수 합계
SELECT AGRDE_SE_CD,
	   SUM(POPLTN_CNT) AS AGRDE_POPLTN_CNT
FROM TB_POPLTN
WHERE ADMINIST_ZONE_NO LIKE '__00000000'
  AND POPLTN_SE_CD = 'T' -- 전체 인구
  AND STD_MT = '202304'
GROUP BY AGRDE_SE_CD
ORDER BY AGRDE_SE_CD;
  
	# 성별 구분을 'T'말고 'M', 'F'를 이용해서 구하기


# 2023년 4월 기준 전국 주요 시/도의 연령대별 인구수 합계를 구하고, 연령대별 인구 비율 구하기
SELECT	A.AGRDE_SE_CD,
	    A.AGRDE_POPLTN_CNT,
        SUM_AGRDE_POPLTN_CNT AS "전체인구",
        CONCAT(ROUND((A.AGRDE_POPLTN_CNT/A.SUM_AGRDE_POPLTN_CNT)*100,2),'%') AS "인구비율"
FROM (
SELECT A.AGRDE_SE_CD,
	   A.AGRDE_POPLTN_CNT,
       SUM(A.AGRDE_POPLTN_CNT) OVER() AS SUM_AGRDE_POPLTN_CNT # 한개의 값이기에 같이 묶일 수 없음. OVER()를 사용해서 다른 컬럼의 값 개수와 맞춰준다. 

FROM (
		SELECT A.AGRDE_SE_CD,
			   SUM(A.POPLTN_CNT) AS AGRDE_POPLTN_CNT
		FROM TB_POPLTN A
		WHERE A.ADMINIST_ZONE_NO LIKE '__00000000'
		  AND A.POPLTN_SE_CD = 'T'
		  AND A.STD_MT = '202304'
		GROUP BY A.AGRDE_SE_CD
		ORDER BY A.AGRDE_SE_CD) A) A;

# 연령대별 인구가 가장 많은 지역 구하기(읍/면/동)
	# 읍/면/동 인구 구하기
SELECT A.AGRDE_SE_CD,
	   A.ADMINIST_ZONE_NO,
       A.ADMINIST_ZONE_NM,
       A.POPLTN_CNT
FROM TB_POPLTN A
WHERE A.ADMINIST_ZONE_NO NOT LIKE '_____00000' # 뒤 다섯 자리가 00000이면 구를 의미.
  AND A.POPLTN_SE_CD = 'T'
  AND A.STD_MT = '202304'
  AND A.POPLTN_CNT>0;
  
# 2023년 04월 기준 전국의 읍/면/동의 전체 인구수를 조회 후 연령대별 인구가 가장 많은 지역을 조회
SELECT A.AGRDE_SE_CD,
	   A.ADMINIST_ZONE_NO,
	   A.ADMINIST_ZONE_NM,
	   A.POPLTN_CNT
FROM (
	SELECT A.AGRDE_SE_CD,
		   A.ADMINIST_ZONE_NO,
		   A.ADMINIST_ZONE_NM,
		   A.POPLTN_CNT,
		   ROW_NUMBER() OVER(PARTITION BY A.AGRDE_SE_CD ORDER BY A.POPLTN_CNT DESC) AS RNUM # 번호를 붙인다. 랭킹과 같은 역할을 할 수 있다. Partition by -> 윈도우 함수, group by와 유사한역할, 
		   # 그룹바이는 테이블 자체에서 집계, partition by는 조회된 결과에서 나눠준다.

	FROM (
			SELECT A.AGRDE_SE_CD,
				   A.ADMINIST_ZONE_NO,
				   A.ADMINIST_ZONE_NM,
				   A.POPLTN_CNT
			FROM TB_POPLTN A
			WHERE A.ADMINIST_ZONE_NO NOT LIKE '_____00000' # 뒤 다섯 자리가 00000이면 구를 의미.
				  AND A.POPLTN_SE_CD = 'T'
				  AND A.STD_MT = '202304'
				  AND A.POPLTN_CNT>0
			ORDER BY A.POPLTN_CNT DESC) A
		) A
WHERE A.RNUM = 1
order by A.AGRDE_SE_CD;

# 2023년 04월 기준 전국의 각 지역의 연령대별 인구수 비율이 높은 지역(읍/면/동)
-- SELECT  A.AGRDE_SE_CD,
-- 		A.ADMINIST_ZONE_NO,
-- 		A.ADMINIST_ZONE_NM,
-- 		A.POPLTN_CNT,
-- 		A.TOTAL_POPLTN_CNT,
--         A.RATIO,
--         A.RNUM
-- FROM (
-- 	SELECT
-- 			A.AGRDE_SE_CD,
-- 			A.ADMINIST_ZONE_NO,
-- 			A.ADMINIST_ZONE_NM,
-- 			A.POPLTN_CNT,
-- 			A.TOTAL_POPLTN_CNT,
-- 			A.RATIO,
-- 			ROW_NUMBER() OVER(PARTITION BY A.AGRDE_SE_CD ORDER BY A.RATIO DESC) AS RNUM
-- 	FROM (
-- 		SELECT
-- 				A.AGRDE_SE_CD,
-- 				A.ADMINIST_ZONE_NO,
-- 				A.ADMINIST_ZONE_NM,
-- 				A.POPLTN_CNT,
-- 				A.TOTAL_POPLTN_CNT,
-- 				CONCAT(ROUND((A.POPLTN_CNT/A.TOTAL_POPLTN_CNT)*100,2),'%') AS RATIO
-- 		FROM (
-- 			SELECT A.AGRDE_SE_CD,
-- 				   A.ADMINIST_ZONE_NO,
-- 				   A.ADMINIST_ZONE_NM,
-- 				   A.POPLTN_CNT,
-- 				   SUM(A.POPLTN_CNT) OVER() AS TOTAL_POPLTN_CNT
-- 			FROM (
-- 				SELECT A.AGRDE_SE_CD,
-- 					   A.ADMINIST_ZONE_NO,
-- 					   A.ADMINIST_ZONE_NM,
-- 					   A.POPLTN_CNT
-- 				FROM TB_POPLTN as A
-- 				WHERE A.ADMINIST_ZONE_NO NOT LIKE '_____00000' # 뒤 다섯 자리가 00000이면 구를 의미.
-- 					AND A.POPLTN_SE_CD = 'T'
-- 					AND A.STD_MT = '202304'
-- 					AND A.POPLTN_CNT>0) A
--                     ) A
-- 				)
-- 			A
--                     ) A
-- 			
-- WHERE A.RNUM = 1;

SELECT A.AGRDE_SE_CD, A.ADMINIST_ZONE_NO, A.ADMINIST_ZONE_NM, A.POPLTN_CNT, A.`행정구역번호별각연령대의인구수가차지하는비율`, A.RNUM
FROM
   (
    SELECT A.AGRDE_SE_CD
         , A.ADMINIST_ZONE_NO
         , A.ADMINIST_ZONE_NM
         , A.POPLTN_CNT
         , A.`행정구역번호별각연령대의인구수가차지하는비율`
         , ROW_NUMBER() OVER(PARTITION BY A.AGRDE_SE_CD ORDER BY A.`행정구역번호별각연령대의인구수가차지하는비율` DESC)
             AS RNUM
      FROM
         (
            SELECT
                   A.AGRDE_SE_CD
                 , A.ADMINIST_ZONE_NO
                 , A.ADMINIST_ZONE_NM
                 , A.POPLTN_CNT
                 , ROUND((POPLTN_CNT / SUM(A.POPLTN_CNT) OVER(PARTITION BY ADMINIST_ZONE_NO)) * 100, 2) # 행정 구역별 인구 비율!, over의 partition 사용
                     AS `행정구역번호별각연령대의인구수가차지하는비율`
              FROM
                 (
                    SELECT
                           A.AGRDE_SE_CD
                         , A.ADMINIST_ZONE_NO
                         , A.ADMINIST_ZONE_NM
                         , A.POPLTN_CNT
                      FROM TB_POPLTN A
                     WHERE A.ADMINIST_ZONE_NO NOT LIKE '_____00000'
                       AND A.POPLTN_SE_CD IN ('T')
                       AND A.POPLTN_CNT > 0
                       AND A.STD_MT = '202304'
                     ORDER BY POPLTN_CNT DESC
             ) A
        ) A
    ) A
 WHERE RNUM = 1;
